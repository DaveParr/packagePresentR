Packages: Structure and Tools
========================================================
author: David Parr
date: `r format(Sys.time(), "%Y-%b-%d")`
autosize: true

What is a package?
========================================================

> A package is a template or set of conventions that structures your code. 

from [Devtools Readme](https://cran.r-project.org/web/packages/devtools/README.html)

This is installed locally using 

`install.packages("myPackage")`

The package is then loaded with 

`library(myPackage)`

Why?
========================================================

> This not only makes sharing code easy, it reduces the time and effort required to complete you project: following a template removes the need to have to think about how to organize things and paves the way for the creation of standardised tools that can further accelerate your progress.

from [Devtools Readme](https://cran.r-project.org/web/packages/devtools/README.html)

What does a package need?
========================================================

## Definately

- `NAMESPACE`
    + Defines search paths for your functions `myPackage::myFunction`
    + Function Level Dependencies: `import(theirfunction, theirPackage)`
- `DESCRIPTION`
    + Package Metadata: Titles, Authors, Descriptions, Contacts
    + Package Level Dependencies: Imports, Suggests, Version
- `R/`
    + Your R code
- `man/`
    + Your documentation

## Optionally

- `data/`
- `tests/`
- `vignettes/`
- `exec/`
- `inst/`
- `probably many more/`

The Traditional Start
========================================================

## `Utils`

## The Function

```{r, eval=FALSE}
package.skeleton()
```

### The Method

- `DESCRIPTION`
- `NAMESPACE`
- `/man`
    + things in your environment
- `/R`
    + things in your environment

### The Approach

This function will inspect the global environment and attempt to compile source code and datasets from the objects within.

### The Philosphy

> Any R stuff you are currently working on, and only R stuff

The Cute Start
========================================================

## `pkgKitten`

## The Method

```{r, eval=FALSE}
kitten("myPackage")
```

## The Output

- `DESCRIPTION`
- `NAMESPACE`
- `/man`
    + `hello.Rd`
    + `myPackage-package.Rd`
- `/R`
    + `hello.R`

## The Approach

The Traditional method (probably) won't actually give you a package you can build. This method guarantees that the output will build, with documented functions and `myPackage-package` in an `.Rd`

## The Philosophy

> Your package definately should build immediately. Think of the kittens.

The Modern Start
========================================================

## `devtools`

## The Method

```{r, eval=FALSE}
create("myPackage")
```

### The Output

- `DESCRIPTION`
- `NAMESPACE`
- `/R`
- `myPackage.Rproj`
- `.gitignore`
- `.Rbuildignore`

### The Approach

This function gives you all the things devtools wants you to work with; a project file, git, RStudio build tools, but none of the random stuff you currently have in your session. Also no documentation.

## The Philosphy

> Specifically no R stuff, but specfically use git and the RStudio IDE

The Friendly Modern Start
========================================================

## RStudio IDE

## The Method

File > New Project > New Directory > R Package

### The Output

- `DESCRIPTION`
- `NAMESPACE`
- `/R`
    + `hello.R`
- `/man`
    + `hello.Rd`
- `myPackage.Rproj`
- `.gitignore`
- `.Rbuildignore`

## The Approach

The GUI interface is new user friendly, and the prepopulated example functions help you build out the contents. This method can also optionally source existing files to build from, but also includes git and projects. The function document is based on the `roxygen2` syntax. 

## The Philosophy

> Modern, but more helpful

Why Document?
========================================================

> Documentation is one of the most important aspects of a good package. Without it, users wonâ€™t know how to use your package. Documentation is also useful for future-you (so you remember what your functions were supposed to do), and for developers extending your package.

from [R packages by Hadley Wickham](http://r-pkgs.had.co.nz/man.html)